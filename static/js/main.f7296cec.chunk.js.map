{"version":3,"sources":["App.module.css","components/Chat/Chat.js","store-redux/chatPageReducer.js","components/Chat/ChatContainer.js","App.js","reportWebVitals.js","store-redux/redux.js","index.js"],"names":["module","exports","main","Chat","props","console","log","messages","map","elem","react_default","a","createElement","text","onChange","event","data","target","value","changeInput","placeholder","initialText","onKeyPress","key","addPost","onClick","initialState","id","chatPageReducer","state","arguments","length","undefined","action","newState","Object","objectSpread","toConsumableArray","type","element","push","newText","ChatContainer","connect","chatPage","dispatch","changeInputActionCreator","App","className","styles","Chat_ChatContainer","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","ReactDOM","createRoot","document","getElementById","render","StrictMode","es","src_App"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,KAAA,kLCiDHC,MA9Cf,SAAcC,GACVC,QAAQC,IAAIF,GAOZ,IA0BIG,EAAWH,EAAMG,SAASC,IAAI,SAAAC,GAAI,OAAIC,EAAAC,EAAAC,cAAA,WAAMH,EAAKI,QAErD,OACIH,EAAAC,EAAAC,cAAA,WACKL,EACDG,EAAAC,EAAAC,cAAA,YAAUE,SATE,SAACC,GACjB,IAAIC,EAAOD,EAAME,OAAOC,MACxBd,EAAMe,YAAYH,IAOqBI,YAAY,oBAAoBF,MAAOd,EAAMiB,YAAaC,WA3BpF,SAACP,GACI,UAAdA,EAAMQ,KACNnB,EAAMoB,aA0BNd,EAAAC,EAAAC,cAAA,UAAQa,QAhCG,WACfrB,EAAMoB,YA+BF,wBCxCRE,EAAe,CACfL,YAAa,GACbd,SAAU,CACV,CAACoB,GAAI,EAAGd,KAAM,aACd,CAACc,GAAI,EAAGd,KAAM,yBACd,CAACc,GAAI,EAAGd,KAAM,kBACd,CAACc,GAAI,EAAGd,KAAM,UACd,CAACc,GAAI,EAAGd,KAAM,QAoCHe,EAjCS,WAAkC,IAAjCC,EAAiCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBJ,EAAcO,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAElDE,EAAQC,OAAAC,EAAA,EAAAD,CAAA,GAAON,EAAP,CACZtB,SAAS4B,OAAAE,EAAA,EAAAF,CAAKN,EAAMtB,YACpB,OAAQ0B,EAAOK,MACX,IAjBS,WAkBL,IAAIC,EAAU,CAAEZ,GAAI,EAAGd,KAAMgB,EAAMR,aAOnC,OAFCa,EAAS3B,SAASiC,KAAKD,GACvBL,EAASb,YAAc,GACjBa,EACX,IA3Ba,eAgCT,OAHAA,EAASb,YAAcY,EAAOQ,QAGvBP,EACX,QACI,OAAOL,WCyBJa,EAJOC,YAdA,SAACd,GACnB,MAAO,CACHR,YAAaQ,EAAMe,SAASvB,YAC5Bd,SAAUsB,EAAMe,SAASrC,WAIR,SAACsC,GACtB,MAAO,CACHrB,QAAS,WAAOqB,EDPY,CAAEP,KA1CrB,cCkDTnB,YAAa,SAACH,GAAU6B,EDbC,SAAC7B,GAE9B,MAAO,CAACsB,KAxCS,eAwCWG,QAASzB,GCWA8B,CAAyB9B,OAI5C2B,CAA6CxC,GC9CpD4C,MANf,SAAa3C,GACX,OACAM,EAAAC,EAAAC,cAAA,OAAKoC,UAAWC,IAAO/C,MACrBQ,EAAAC,EAAAC,cAACsC,EAAD,QCKWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,cCMCY,EARHC,YAAe,CACvBC,QAAS,CACLtB,SAAUhB,KCGLuC,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH7D,EAAAC,EAAAC,cAACF,EAAAC,EAAM6D,WAAP,KACE9D,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAUT,MAAOA,GAAOtD,EAAAC,EAAAC,cAAC8D,EAAD,SAW5BvB","file":"static/js/main.f7296cec.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"App_main__1MdFF\"};","import React from \"react\";\n//import {addPostActionCreator, changeInputActionCreator} from './../../store-redux/chatPageReducer'; //we import actioncreators\n\n\nfunction Chat(props) {\n    console.log(props);\n    //let textRef = React.createRef(); //to create ref of the input data\n\n    // let onClickEvent = () => { \n    //     props.addPost(); //addPost is a function from store (it pushes new elem with input data to the store array)\n    //    // props.changeInput(\"\"); // changeInput is a function from store which changes initialText to \"\" (empty string)\n    // };\n    let onClickEvent = () => {\n        props.addPost();\n        //props.dispatch(addPostActionCreator());\n    };\n    let onEnterKey = (event) => {\n        if (event.key === \"Enter\") {\n            props.addPost();\n        }\n    }; //woohoo new feature on here!!!\n\n    // let onClickEvent = () => { \n    //     let data = textRef.current.value; //to get the value of input\n    //     props.addPost(data); //addPost is a function from store (it pushes new elem with input data to the store array)\n    //     props.changeInput(\"\"); // changeInput is a function from store which changes initialText to \"\" (empty string)\n    // };\n\n    // let onInputChange = () => {\n    //     let data = textRef.current.value; //to get the value of input (it comes from props)\n    //     props.changeInput(data); //changeInput is a function from store \n    //     //(it changes initialText in the store, then this new value rerenders to the Chat component)\n    // }\n\n    let onInputChange = (event) => {\n        let data = event.target.value; //instead of ref we use event.target.value to get input value //we get data on here\n        props.changeInput(data); //we pass newText (which we need in store) to action \n    }\n    let messages = props.messages.map(elem => <div>{elem.text}</div>) \n\n    return (\n        <div>\n            {messages}\n            <textarea onChange={onInputChange} placeholder=\"Your message here\" value={props.initialText} onKeyPress={onEnterKey}></textarea> \n            <button onClick={onClickEvent}>Add</button>\n           \n        </div>\n    )\n}\n\nexport default Chat;","\nconst CHANGE_INPUT = \"CHANGE-INPUT\"; //we make constants of action types and use them instead of strings to avoid bugs\nconst ADD_POST = \"ADD-POST\";\n\nlet initialState = {\n    initialText: \"\", \n    messages: [\n    {id: 1, text: \"What's up\"},\n    {id: 2, text: \"What's going on here?\"},\n    {id: 3, text: \"I have no idea\"},\n    {id: 4, text: \"Me too\"},\n    {id: 5, text: \":(\"} ]\n};\n\nconst chatPageReducer = (state = initialState, action) => { //здесь в стейт приходит уже та информация, которая необходима для изменения \n    //стейта данной страницы chatPage, поэтому стейт уже равен chatPage // пришло: chatPageReducer(chatPage, {type: CHANGE_INPUT, newText: \"Hello\"})\n    let newState = {...state, //making the copy of state\n    messages: [...state.messages]};\n    switch (action.type) {\n        case ADD_POST: \n            let element = { id: 6, text: state.initialText}; //this elem is pushed to the store\n            // let stateCopy = {...state}; // we created a shallow copy of state\n            // stateCopy.messages = [...state.messages]; // we added an array of messages to the copy\n            // stateCopy.messages.push(element); // we pushed a new element to the copy\n            // stateCopy.initialText = \"\"; //changing the text of initialText of the copy\n             newState.messages.push(element);\n             newState.initialText = '';\n            return newState; \n        case CHANGE_INPUT:\n           \n            newState.initialText = action.newText; //we will take newText from action\n            // which will be determined when the function changeInput is called in Chat component\n            //this._callSubscriber(); - we dont call _callSubscriber on here anymore. we only change state here and return it\n            return newState;\n        default:\n            return state;\n    }\n}; //используем свитч кейс и если экшн тайп не найден, то просто возвращаем стейт по умолчанию\n\nconst changeInputActionCreator = (data) => { //we need to pass data variable because we\n    // need to pass 'data' to store method to change initialText in store\n    return {type: CHANGE_INPUT, newText: data};\n};\n\nconst addPostActionCreator = () => ({ type: ADD_POST }); //we can re-write arrow function like that \n//(no return, () are needed because we need to return an object )\n\nexport default chatPageReducer;\nexport {changeInputActionCreator, addPostActionCreator};","import Chat from \"./Chat\";\nimport {addPostActionCreator, changeInputActionCreator} from '../../store-redux/chatPageReducer'; //we import actioncreators\nimport { connect } from \"react-redux\";\n\n\n// function ChatContainer(props) {\n\n// let state = props.store.getState();\n//    // console.log(state);\n//     //let textRef = React.createRef(); //to create ref of the input data\n\n//     // let onClickEvent = () => { \n//     //     props.addPost(); //addPost is a function from store (it pushes new elem with input data to the store array)\n//     //    // props.changeInput(\"\"); // changeInput is a function from store which changes initialText to \"\" (empty string)\n//     // };\n//     let addPost = () => {\n//         props.store.dispatch(addPostActionCreator());\n//     };\n\n//     // let onClickEvent = () => { \n//     //     let data = textRef.current.value; //to get the value of input\n//     //     props.addPost(data); //addPost is a function from store (it pushes new elem with input data to the store array)\n//     //     props.changeInput(\"\"); // changeInput is a function from store which changes initialText to \"\" (empty string)\n//     // };\n\n//     // let onInputChange = () => {\n//     //     let data = textRef.current.value; //to get the value of input (it comes from props)\n//     //     props.changeInput(data); //changeInput is a function from store \n//     //     //(it changes initialText in the store, then this new value rerenders to the Chat component)\n//     // }\n\n//     let changeInput = (data) => {\n//         props.store.dispatch(changeInputActionCreator(data)) //we pass newText (which we need in store) to action \n//     }\n\n//    let messages = state.chatPage.messages.map(elem => <div>{elem.text}</div>) //to make each elem of the array to render in Chat component\n\n//     return ( <Chat changeInput={changeInput} addPost={addPost} messages={messages} newText={state.chatPage.initialText}/>) \n   \n// }\n\n\nlet mapStateToProps = (state) => { //this function returns a part of state we need for this page\n    return {\n        initialText: state.chatPage.initialText,\n        messages: state.chatPage.messages\n    }\n};\n\nlet mapDispatchToProps = (dispatch) => { //this function dispatches the logic from store\n    return {\n        addPost: () => {dispatch(addPostActionCreator())},\n        changeInput: (data) => {dispatch(changeInputActionCreator(data))}\n    }\n};\n\nconst ChatContainer = connect(mapStateToProps, mapDispatchToProps)(Chat) //connect is a special \n//function that takes what mapStateToProps, mapDispatchToProps returned and \"builds a container component\" around the component \n//stated in the arguments\n\nexport default ChatContainer;","import styles from './App.module.css';\nimport React from 'react';\nimport ChatContainer from './components/Chat/ChatContainer';\n\nfunction App(props) {\n  return ( \n  <div className={styles.main}>\n    <ChatContainer /> \n  </div> ) }\n//store={props.store} \nexport default App;\n\n// <ChatContainer store={props.store} /> \n//<ChatContainer state={props.state} dispatch={props.dispatch} />","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// теперь используется redux toolkit. npm install @reduxjs/toolkit \n\nimport {configureStore} from \"@reduxjs/toolkit\"; //redux toolkit - импортируем configureStore\nimport chatPageReducer from './chatPageReducer'; //импортируем редьюсеры \n\nlet store = configureStore({ //создаем стор не createstore, a configureStore!!!\n    reducer: {\n        chatPage: chatPageReducer\n        //здесь находятся все редьюсеры в форме свойство(страничка): значение(необх редьюсер)\n    } \n})\n    //создаем объект, который имеет reducer: {все остальные редьюсеры}\n\nexport default store;\n\n// //Функция configureStore\n\n// //Данный инструмент позволяет автоматически комбинировать редьюсеры, \n//добавить мидлвары Redux (по умолчанию включает redux-thunk), а также использовать \n//расширение Redux DevTools. В качестве входных параметров функция configureStore принимает объект со следующими свойствами:\n\n// reducer — набор пользовательских редьюсеров, !!!\n// middleware — опциональный параметр, задающий массив мидлваров, предназначенных для подключения к хранилищу,\n// devTools — параметр логического типа, позволяющий включить установленное в браузер расширение Redux DevTools (значение по умолчанию — true),\n// preloadedState — опциональный параметр, задающий начальное состояние хранилища,\n// enhancers — опциональный параметр, задающий набор усилителей.","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n//import store from './store-redux/store';\nimport store from './store-redux/redux';\nimport { Provider } from 'react-redux';\n//import { addPost, changeInput, subscribe } from './store-redux/store';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <Provider store={store}><App /> \n    </Provider> \n    {/* we need to pass store={store} in Provider!!!!!!! */}\n    {/* Provider is a component from react-redux library that helps to pass store */}\n\n    {/* <App state={store.getState()} dispatch={store.dispatch.bind(store)} />  */}\n    {/* we need to bind methods as they contain 'this' and when Chat component \n    calls these methods from its props, it gets data from props, not from store!!!*/}\n  </React.StrictMode>\n); \n\nreportWebVitals();\n\n"],"sourceRoot":""}